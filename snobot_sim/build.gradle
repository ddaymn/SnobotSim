plugins {
  id 'cpp'
//   id 'edu.wpi.first.wpilib.repositories.WPILibRepositoriesPlugin' version '2020.2'
//   id 'edu.wpi.first.NativeUtils' version '2020.7.2'
//   id 'edu.wpi.first.GradleVsCode' version '0.12.0'
}
apply plugin: 'edu.wpi.first.NativeUtils'

repositories {
    mavenCentral()
}
if (project.hasProperty('releaseMode')) {
    wpilibRepositories.addAllReleaseRepositories(project)
} else {
    wpilibRepositories.addAllDevelopmentRepositories(project)
}

apply from: 'config.gradle'

nativeUtils {
  exportsConfigs {
      navx_frc {
      }
  }
}

model {
  components {
    snobotSimCpp(NativeLibrarySpec) {
      appendDebugPathToBinaries(binaries)
      binaries.all {
        if (it.targetPlatform.name == nativeUtils.wpi.platforms.roborio || it.targetPlatform.name == nativeUtils.wpi.platforms.raspbian) {
            println "Skipping platform " + it.targetPlatform.name
        } else {
          it.sources {
            athenaCpp(CppSourceSet) {
              
                    source {
                        srcDirs = ['src/main/native/cpp', "$buildDir/generated/cpp"]
                        includes = ['**/*.cpp']
                    }
                    exportedHeaders {
                        srcDirs = ["src/main/native/include"]
                    }
            }
          }
        }
      }
      nativeUtils.useRequiredLibrary(it, "wpilibc_shared", "ntcore_shared", "hal_shared", "wpiutil_shared")
    }
  }
}
task packageNativeFilesInJar(type: Jar) {

    destinationDir = project.buildDir
    classifier = "snobotSim-native-" + org.gradle.internal.os.OperatingSystem.current().getFamilyName();

    project.model {
        binaries {
            withType(SharedLibraryBinarySpec) { binary ->
                if (binary.component.name == 'snobotSimCpp') {
                    dependsOn binary.buildTask
                        into "xx" // NativeUtils.getPlatformPath(binary)
                }
            }
        }
    }
}
build.dependsOn packageNativeFilesInJar